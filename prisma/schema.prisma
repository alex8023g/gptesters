generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(ulid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  userApp          App?
  testingAppsUsers TestingAppsUsers[]
  accounts         Account[]
  sessions         Session[]
}

model App {
  id                     String             @id @default(ulid())
  name                   String
  url                    String
  createdAt              DateTime           @default(now())
  author                 User               @relation(fields: [userId], references: [id])
  userId                 String             @unique
  testingAppsUsers       TestingAppsUsers[]
  hasEnoughInstallations Boolean            @default(false)
  hasTwelveInstallations Boolean            @default(false)
  testCompleted          Boolean            @default(false)
}

model TestingAppsUsers {
  app           App     @relation(fields: [appId], references: [id])
  appId         String
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  isInstalled   Boolean @default(false)
  addedAsTester Boolean @default(false)

  @@id([appId, userId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
